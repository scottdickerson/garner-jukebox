---
import {
    VideoSelection,
    type VideoSelectOption,
} from '../../../components/VideoSelection'
import Layout from '../../../layouts/Layout.astro'
import { translatedStrings } from '../../../data/translations'
import DetailLayout from '../../../layouts/DetailLayout.astro'

const { lang, videoType } = Astro.params as {
    lang: 'en' | 'es'
    videoType: 'dance' | 'homeVideo'
}

export const prerender = true

export const getStaticPaths = () => {
    return Object.keys(translatedStrings).flatMap((lang) =>
        ['dance', 'homeVideo'].map((videoType) => ({
            params: { videoType, lang },
        }))
    )
}

const videoImages: VideoSelectOption[] = Array.from(
    { length: 4 },
    (_, index) => {
        const videoTypeName = videoType === 'dance' ? 'DanceFloor' : 'Home'
        return {
            imageSrc: `TitleScreens_${videoTypeName}Video${index + 1}.png`,
            href: `/${lang}/video/${videoType}/${index + 1}`,
        }
    }
)
---

<Layout title={`Select Video: ${videoType}`}>
    <DetailLayout>
        <p class="max-w-[700px] text-35 font-tuffy text-center pb-4">
            {translatedStrings[lang].videoSelect}
        </p>
        <VideoSelection
            lang={lang}
            videoImages={videoImages}
            videoType={videoType}
        />
        <p class="max-w-[800px] text-18 pt-2 font-tuffy text-center">
            {
                translatedStrings[lang][
                    videoType === 'homeVideo'
                        ? 'videoSelectAttributionHome'
                        : 'videoSelectAttributionDance'
                ]
            }
        </p>
        <div class="flex justify-center items-center text-35 font-tuffy">
            <a
                href={`/${lang}/videoSelect/dance`}
                class={videoType === 'dance'
                    ? 'underline underline-offset-4'
                    : ''}
            >
                {translatedStrings[lang].danceFloorVideos}
            </a>&nbsp;|&nbsp; <a
                href={`/${lang}/videoSelect/homeVideo`}
                class={videoType === 'homeVideo'
                    ? 'underline underline-offset-8'
                    : ''}
            >
                {translatedStrings[lang].homeMovies}
            </a>
        </div>
    </DetailLayout>
</Layout>
